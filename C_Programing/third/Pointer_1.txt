Pointer__ 포인터 변수

데이터의 주소값이란
데이터가 저장된 메모리의 시작 주소
-> C언어는 1byte 크기의 메모리 공간으로 표현
-> int 형은 4byte크기를 가지지만, 
데이터의 주소값은 시작주소 1byte만을 가리킨다.

What is Pointer?
-> 포인터는 메모리 주소값을 저장하는 변수
-> char형 변수가 문자로 저장하고,
    int형 변수가 정수를 저장하는 척하면서 주소값을 저장한다.
int n =100;     //변수의 선언
int *ptr = &n; //포인터의 선언

Pointer Operator
1. 주소 연산자(&)__번지 연산자 -> 해당 변수의 주소값을 반환
2. 참조 연산자(*) -> 포인터에 가리키는 주소에 저장된 값을 반환

Pointer 선언(&)
int* arr;
초기화하는 이유는 의도하지 않는 
메모리의 값을 변경하게 되기 때문.
num = 11;
int* arr = &num;
int* arr = 주소값;
// 우리 포인터를 선언할 때, 꼭 초기화 하장!!

포인터의 참조(*)
-> 포인터가 가리키고 있는 주소값의 데이터를 참조하는 예제
int x = 7;           //변수의 선언
int *ptr = &x;     //포인터의 선언 -> 주소값 반환
int *pptr = &ptr; //포인터의 참조 -> 포인터에 가리키는 주소의 저장된 값

32바이트의 1word -> 4byte
64바이트의 1word -> 8byte

포인터의 타입은 
-> (*)를 통해 메모리의 크기를 알려주는 역활을 한다.
-> 1word의 byte 수가 달라짐.

포인터의 연산
1. 포인터의 뺄셈은 두 포인터의 상대적 거리를 나타낸다.
2. 포인터는 실수와의 연산을 허용하지 않는다.
3. 포인터끼지 대입하거나 비교할 수 있다.

포인터의 저장되는 초기 주소값은 0x00
int* ptr_int = NULL;
ptr+0 -> 0x00
ptr+1 -> 0x04
ptr+2 -> 0x08
ptr+3 -> 0x0C 
//1증가시키는 연산후 각각의 포인터 타입은 달라진다.
// 만일 int형 포인터의 증각폭은 타입형식의 바이트만큼 증가하게 된다.
// 이 법칙은 포인터의 뺄셈에서도 똑같이 적용된다.


인수 전달 방법
-> 함수호출시 데이터인수(argument)로 전달가능.
1. 값에 의한 전달(call by value)
-> 함수 내의 매개변수에 복사하는 방식
-> 인수로 전달되는 변수는 아무런 영향을 미치지 않음.
void local(int);
local(var);
void local(int num)

2. 참조에 의한 전달(call by reference)
-> 인수로 변수의 값을 전달하는 것이 아닌,
     해당 변수의 주소값을 전달한다.
-> 함수의 매개변수의 원래 주소값을 저장하는 것
-> 변수의 값을 함수 내에서 변경할 수 있음.
void local(int*)
local(&var)
void local(int* num)


다양한 포인터
1. 포인터의 포인터
-> 참조 연산자(*)를 2번 써서__이중 포인터라고도 함.
int num = 10;                    //변수 선언
int* ptr_num = &num;         //포인터 선언
int** pptr_num = &ptr_num; //포인터의 포인터 선언

2. void 포인터(void pointer)
-> 데이터의 타입을 명시하지 않은 포인터
-> 변수, 함수, 포인터 등 어떠한 값도 가리킬 수 있음.
-> 포인터 연산 or 메모리 참조와 같은 작업을 할 수 없음.
-> 꼭 void포인터를 사용하기 위해 
    [명시적 타입 변환 작업]을 하장!!
int num = 10;
void* ptr_num = &num;
*(int*)ptr_num

3. 함수 포인터(function pointer)
->함수의 이름은 함수의 시작 주소를 
가리키는 포인터 상수(constant pointer)
-> 함수의 시작 주소롤 가리키는 포인터상수를 
    function pointer라고 한다. 
-> 함수 포인터의 포인터 타입은 
    함수의 반환값과 매개변수에 의해 결정
함수 원형 = void func(int , int);
함수 포인터 = void(*ptr_num)(int , int);

4. 널 포인터(null pointer)
-> 0이나 NULL을 대입ㅈ하여 초기화한 포인터
-> 아무것도 가리키지 않는 포인터









