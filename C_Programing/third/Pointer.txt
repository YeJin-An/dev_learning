주소값의 이해
1. 데이터의 주소값
: 데이터가 저장되는 메모리의 시작 주소
: 주소값은 1바이트 크기의 공간(메모리)으로 표현
ex> int형 데이터는 4bit 
    -> int형의 데이터주소값 = 시작주소 1바이트

포인터(Pointer)란?
: 메모리의 주소값을 저장하는 변수__포인터 변수
int n = 100;   //변수의 선언
int *ptr = &n; //포인터의 선언


포인터 연산자
1. 주소 연산자(&)
-> 해당 변수의 주소값
-> 앰퍼샌드(ampersand)_번지 연산자
2. 참조 연산자(*)
-> 포인터에 가리키는 주소에 저장된 값 [반환]
-> 포인터 선언 or 메모리애 접근 할 때도 사용.

포인터의 선언
int* arr;
포인터는 반드시 초기화 작업을 해줘야 한다.
왜냐하면 의도하지 않는 메모리의 값이 변경되기 때문
다행스럽게, 
C컴파일러는 초기화되지 않는 포인터를 오류발생을 한다.
1. int*arr_1 = &arr; 
2. int*arr = 30;

포인터의 참조
int x = 7;        //변수의 선언_[포인터 크기출력(sizeof)]
int *ptr = &x;    //포인터의 선언_[포인터의 주소값출력]
int *pptr = &ptr; //포인터의 참조_[주소값의 데이터출력]

// 워드(word)
--> CPU가 한번에 처리할 수 있는 데이터의 크기
1 byte = 8 bit
32비트 시스템 = 32 bit / 8bit = 4byte = 1word
64비트 시스템 = 64 bit / 8bit = 8byte = 1word

CPU가 64바이트라면, 1워드는 8byte이므로 '8'이다??

-----------------------------------------------------------

포인터의 연산
-> 값을 증가 혹은 감소 등 
   제한된 연산만을 할 수 있음.

포인터의 규칙
1. 포인터끼리 연산은 아무런 의미가 없음.
2. 포인터끼리 뺄셈은 상대적 거리를 나타낸다.
3. 포인터는 실수와의 연산은 허용하지 않는다.
4. 포인터끼지 대입하거나 비교할 수 있음.
ex>
모든 포인터에 저장된 초기 주소값은 0X00
허나 포인터 연산 후 포인터가 가리키는 있는 주소는
     포인터 타입에 따라 달라진다.
포인터의 증가 폭은 변수의 차입의 크기와 같게 된다. 

-> char* ptr_char = 0;
-> int* ptr_int = NULL;
-> doucle* ptr_double = 0x00;

int *ptr;
ptr + 0 = 0x00
ptr + 1 = 0x04
ptr + 2 = 0x08
ptr + 3 = 0x0C

-------------------------------------------------------------

포인터 인수전달방법
: 함수에 필요한 데이터를 인수(argument)로 전달 가능

인수 전달 방법(call by value)
1. 값에 의한 전달(call by value)
-> 인수에 있는 값을 함수 안에서 매개변수에 복사하는 방식. 
-> 함수 내에서의 매개변수 조작은 
   인수로 전달되는 변수에 아무런 영향을 미치지 않습니다.
// num의 값을 아무리 변경하더라고 원래 인수로 전달된 
   변수var의 값은 절대 변경되지 않습니다.
   void local(int)
   void local(int num)
   int var = 10;
   local(var)

2. 참조에 의한 전달(call by reference)
: 인수로 변수의 값을 전달하는 것이 아닌, 해당 변수의 [주소값]을 전달합니다.
-> 함수의 매개변수에 인수로 전달된 변수의 원래 [주소값을 저장]하는 것
-> 전달된 변수의 값을 함수 내에서 [변경]할 수 있게 된다
// local()함수의 매개변수 num는 변수 var의 주소값을 전달받는다.
   원래 인수인 변수 var의 값도 같이 변경됨.
   void local(int*)
   void local(int* num)
   int var = 10;
   local(&var)

----------------------------------------------------------------

[ Pointer of Pointer ]

-> 포인터 변수를 가리키는 포인터
-> 참조연산자(*)를 2번 사용하여, 이중 포인터라고 한다.
: 포인터의 포인터를 선언하고, 포인터의 포인터를 이용한 접근 방법

int num = 10;              //변수 선언
int* ptr_num = &num;       //포인터 선언
int** pptr_num = &ptr_num; //포인터의 포인터 선언

//정리
1. void 포인터(void pointer)
int num = 10
void* ptr_num = &num;
*(int*)ptr_num = 20

2. 함수 포인터(function pointer)
void func(int,int);
void (*ptr_num)(int,int)
calculator() => result = calculator(num01, num02, calc)

3. 널 포인터 (null pointer)
아무것도 가리키지 않는 포인터__NULL을 대입하여 초기화한 포인터



1. void 포인터(void pointer)
-> 데이터의 타입을 명시하지 않은 포인터
   어떠한 값도 가리킬 수 있지만, 연산 메모리 참조는 불가능
-> 주소값을 저장하는 것 외에는 할 수 있는 일은 없다.
-> void를 사용하기 위해서 명시적 타입 변환 작업을 거친 후 void사용하자
int num = 10;
void* ptr_num = &num;
*(int*)ptr_num = 20;
// *ptr_num 을 *(int*)ptr_num으로 바꿔주기!!



2. 함수 포인터(function pointer)
-> 프로그램에서 정의된 함수는 실행시 메인 메로리에 올라가게 된다.
-> 함수의 이름은 시작 주소를 가리키는 포인터상수(constant pointer)라고 부른다.
// 해당 함수에 맞는 함수 포인터(function pointer)를 만들 수 있음.
   void func(int,int); __ 원형
   void (*ptr_func) (int,int);
   --> 연산자의 우선순위 때문에 괄호()로 둘러싸야 한다.

double(*calc)(double,double) = NULL;
double result = 0;
double num01 = 3, num02 = 5;
char oper = '*';

switch(oper): { . . . }
result = calculator(num01 , num02 , calc);
printf("사칙 연산의 결과는 %1f입니다.\n",result);

// 이렇게 선택된 함수는 함수 포인터를 사용하여
   calculator() 함수에 인수로 전달되게 된다.


3. 널 포인터(null pointer)
: NULL울 대입하여 초기화한 포인터를 부른다.
: 아무것도 가리키지 않는 포인터라는 의미이다.



