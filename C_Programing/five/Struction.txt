구조체(Structure type)
-> C언어의 기본 타입으로 
   새롭게 정의할수 있는 사용자 정의 타입
-> 기본 타입만으로 나타낼 수 없는 
   복잡한 데이터를 표현할 수 있음.

1. 변수 집합 -> 배열이 같은 타입
2. 구조체 -> 다양함 타입의 변수집합
// 구조체를 구성하는 변수를 
   구조체의 멤버(number) OR 멤버 변수(member variable)


1. 구조체의 정의와 선언
struct 구조체이름{
  멤버변수 1의 타입 멤버변수1의이름;
  멤버변수 2의 타입 멤버변수2의 이름;
}

struct(키워드) book(구조체 이름){
  char title[30];
  char author[30];
  int price;
  -> 구조체의 멤버 변수
}
-> book 구조체는 사용자 정의 자료형이라고 한다.
--> struct book my_book;

struct book{
  char title[30];
  char author[30];
  int price;
} my_book;



2. typedef 키워드
-> 이미 존재하는 타입에 새로운 이름을 붙일 때, 사용.
-> typedef키워드를 사용하여 
   매번 struct키워드를 사용하지 않아도 됨.
typedef struct book TEXTBOOK;

typedef struct{
  char title[30];
  char author[30];
  int price;
} TEXTBOOK;
// 구조체의 정의와 typedef 선언을 동시에 할 때,
   구조체의 이름을 생략할 수 있습니다.



3. 구조체 멤버로의 접근 방법
-> 배열에서 인덱스를 이용하여 배열 요소에 접근 할 수 있다.
mybook.author
// 구조체의 주소값과 구조체의 첫 번째 멤버 변수의 주소값은 
   언제난 같습니다.



4. 구조체 변수의초기화
-> 멤버 연산자(.)와 중괄로({})를 사용한다.
my_book = {.title = "HTML과CSS", .author = "홍길동",
           .price = 2800};
-> 멤버 변수가 정의된 순서와 초기화하는 순서는
   아무런 상관이 없고, 
   초기화하지 않는 멤버 볍수는 0으로 초기화된다.
my_book = {"HTML과CSS","홍길동",28000};

#include <stdio.h>
struct book{
  char title[30];
  char author[30];
  int price;};

int main(void){
  struct book my_book = {"HTML과CSS","홍길동",28000};
  struct book java_book = {.title="Java language",
                           .price = 30000}; }
printf(my_book.title, my_book.author, my_book.price);
printf(java_book.title, java_book.author, java_book.price);

# typedef 키워드 사용편

#include <stdio.h>

typedef struct{
  char title[30];
  char author[30];
  int price;
} TEXTBOOK;

int main(void){
  TEXTBOOK my_book = {"HTML과CSS","홍길동",28000};
  TEXTBOOK java_book = {.title = "JAVA language",
                        .price = 30000}; }
printf(my_book.title, my_book.author, my_book.price)
printf(java_book.title, java_book.author, java_book.price)

