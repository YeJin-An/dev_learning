메모리의 구조
: 프로그램이 실행되기 위해 프로그램이 메모리에 로드(load)되어야 한다.
: 프로그램에서 사용되는 변수들을 저장할 메모리도 필요하다.
-> 프로그램이 운영체제로부터 할당받은 대표적인 메모리 공간,,

낮은 주소(low memory)    -(1)(2)> 런 타임에 크기가 결정됨. -(3)> 
컴파일 타임에 크기가 결정됨. -(4)> 높은 주소(hogh memory)


1. 코드(code)영역
-> 실행할 프로그램의 코드가 저장되는 영역

2. 데이터(data)영역
-> 전역 변수와 정적(static)변수가 저장되는 영역
-> 프로그램이 종료되면, 소멸한다.

3. 스택(stack)영역
-> 지역 변수와 매개변수가 저장되는 영역
-> 함수의 호출이 완료되면, 소멸한다.
-> 함수의 호출 정보를 스택프레임(stack frame)
   메모리의 높은 주소에서 낮은 주소의 방향으로 할당
   후입선출(LIFOm Last-In First-Out)

4. 힙(heap)영역
-> 사용자가 직접 관리할 수 있는 메모리영역
-> 동적으로 할당되고 해제된다.
* 동적할당이란?
: 컴퓨터 프로그래밍에서 실행 시간 동안 
  사용할 메모리 공간을 할당하는 것을 말한다.

** 정리
-> 실행할 프로그램의 코드가 저장되는 영역
-> 정역 변수와 정적(static)변수가 저장되는 영역
-> 지역 번수와 매개변수가 저장되는 영역
-> 사용자가 직접 관리 할 수 있는 메모리영역

------------------------------------------------------------

스택 프레임(stack frame)
: 메모리의 스택(stack)영역은 지역변수와 매개변수가 저장되는 영역
: 함수의 호출이 완료되면 소멸한다.
-> 스텍 영역에 차례대로 저장되는 함수의 호출 정보를 stack frame,,
* 덕분에 해당함수가 호출되기 이전 상태로 돌아갈 수 있음.

1. 스택 프레임의 동작 방식
int main(void) {func1(); return 0;} //func1()호출
void func1() {func2();}             //func2()호출
void func2() {}

스택 프레임의 변화
Step1 -> main(){매개변수,반환주소값,지역변수}
Step2 -> main() + func1(){매개변수,반환주소값,지역변수}
Step3 -> main() + func1() + func2(){매개변수,반환주소값,지역변수}
Step4 -> main() + func1(){매개변수,반환주소값,지역변수}
Step5 -> main(){매개변수,반환주소값,지역변수}
Step6 -> 아무 것도 없음.
==> 후입선출(LIFO,Last-In First-Out)방식


2. 스택 오버플로우(stack overflow)
: 재귀 호출이 무한히 반목되면, 해당 프로그램은 stack overflow애 의해 종료된다.
-> 왜냐하면 스택의 의 공간은 한정되어 스택영역을 넘어가서 저장하게 된다.
// 이렇게 되면 프로그램 오동적 OR 보안상의 큰 취약점을 가지게 된다.
** 정리 --> C언어에서 스택 overflow가 발생하면, 에러를 발생하고 강제 종료한다.

----------------------------------------------------------------

메모리의 동적 할당(dynamic allocation)
-> 데이터 영역과 스택 영역에 할당되는 메모리 크기는
   컴파일 타임(compile time)에 미리 결정
-> 힙 영역의 크기는 실행되는 도중 런 타임(run time)에 
   사용자가 직접 결정하게 된다.
: 런 타임에 메모리를 할당받는 것은 메모리의 동적 할당(dynamic allocation)

1. malloc() 함수
* 함수의 원형
#include <stdlib.h>
void *malloc(size_t size);
-> 프로그램이 실행 중 사용자가 직접 힙 영역에 메모리 할당할 수 있게 하는 것.

2. free() 함수
* 함수의 원형
#include <stdlib.h>
void free(void *ptr);

3. calloc() 함수
* 함수의 원형
#include <stdlib.h>
void *calloc(size_t nmemb, size_t size);

4. realloc() 함수
* 함수의 원형
#include <stdlib.h>
void *realloc(void *ptr, size_t size);


