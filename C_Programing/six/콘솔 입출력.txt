콘솔 입출력

1. 콘솔 입출력
: C언어의 기본적인 입출력 방식에 대해 알고 있어야 한다.



2. 버퍼(buffer)
: printf(), scanf(), puts()함수는 C언어의 표준 입출력 함수
: 표준 입출력 함수를 사용할때, 버퍼(buffer)라는
  임시 메모리 공간을 사용하게 된다.
**장점
: 전송 시간이 적게 걸려 성능이 향상된다.
: 문자를 잘못 입력했을 때, 수정할 수 있다.
// 자신의 목적에 맞게 버퍼의 사용 여부를 판단해야
   소비자의 맞는 기능을 쉽게 구현이 가능해진다.



3. 버퍼링 방식
-> 완전 버퍼링(fully buffered)
: 버퍼가 {꽉 차면 목적지로 내용}을 보내는 방식
: {파일 입출력}에서 사용이 된다.

-> 라인 버퍼링(line-buffered)
: 입력된 문자 중 {개행 문자}가 나타날 때, 
  버퍼 안의 내용을 목적지로 보내는 방식이다.
: {키보드 입력}에서 사용이 된다.
// 데이터를 출력 버퍼에 저장되었다가 
   출력 스트림을 통해 모니터로 전송된다.



4. fflush()함수
: 인수로 전달된 스트림에 연결된 버퍼를 비워준다.
#incldue <stdio.h>
int fflush(FILE *steam);
// 출력 스트림이 인수로 전달되면,
   출력 버퍼 안에 있는 데이터를 즉시 목적지로 보내준다.
// 버퍼를 성공적으로 비우면 0을 반환하고,
   버퍼를 비우는 데 실패하면 EOF를 반환한다.

이름을 입력받을 때,
(Enter)키가 입력 버퍼에 남아있기 때문이다.

키보드로부터 데이터를 입력받지 않고, 
버퍼에 남아있는 {이전 데이터}를 먼저 사용한다.
// 그렇기 때문에 fflush()함수를 이용해 
   버페에 남아있는 데이터를 비워야 한다.

puts("...")
scanf("%s",str);

fflush(stdin);

puts("...")
scanf("%c",&ch);

    [ Visual Studio 2015 ]
--> fflush() 함수가 아닌 
    입력 버퍼를 지우기 위해서
    getchar() 함수를 이용하여야 한다.
