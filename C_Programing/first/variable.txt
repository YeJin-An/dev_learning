variable
-> data를 저장하기 위해 할당 받는
   일런의 메모리 공간
-> 메모리 공간에 저장된 값은 변경될 수 있음.
-> 메모리의 주소(address)를 기억하는 역할

variable의 종류
1. 정수형 변수 -> char형, int형 , long형
2. 실수형 변수 -> float형, double형 


포인터 variable
-> 메모리의 주소를 저장하고 처리하는 포인터 변수가 있음
-> 관련된 정보를 묶어 처리하는 "사용자 정의 구조체 변수" 있음.


변수의 이름 생성 규칙
1. 영어문자, 숫자 ,언더스코어 로만 구성
2. 변수의 이름은 숫자로 시작할 수 없음.
3. 변수의 이름사이에는 공백이 들어가면 안됨.
4. C언어에서 미리정의된 예약어(keyword)를 사용할 수 없음.

// keyword는 미국표준협회 ANSI에서 지정한 키워드


비트(bit)와 바이트(byte)
bit  -> 컴퓨터가 데이터 처리를 위한 데이터의 최소 단위
byte -> 한 문자를 표현할 수 있는 최소 단위

메모리 구조
-> 물리적인 메모리 공간을 구분하기 위한 식별자
-> 변수 참조시 해당 주소에 저장된 데이터를 참조하게 된다.

메모리 공간
-> 1byte(8bit)의 데이터가 저장
-> 낮은 주소부터 차례대로 데이터가 저장

-> 변수의 이름은 메모리 주소인 0X10만을 가리키게 됨
-> 변수가 어떤 형태로 구성되는지 알아야 
   해당 변수에서 데이터를 올바르게 참조할 수 있음.

// varable 는 메모리의 주소 address 를 기억하는 역활을 한다.


변수의 선언
1. 변수를 저장하기 위해 메모리 공간을 할당받는다.
2. 메모리 공간을 할당받는 행위는 변수의 선언이다.
3. 선언되지 안은 변수를 사용할시, 오류를 발생시킨다.

1. 변수의 선언만 하는 방법
타입 변수이름;
int age; -> age = 20;
// 주의점 해당타입의 데이터에 저장하지 않으면,
   데이터에 변형및 손실이 일어날 수 있음.

2. 변수의 선언과 동시에 초기화하는 방법
초기값 -> 해당 변수를 사용할 수 있도록 설정하는 행위
초기화되지 않은 변수는 쓰레깃값만이 들어가 있다.
// 초기화 되지 않은 변수는 정대 사용하지 말자..
1. int num01, num02;
2. double num03 = 1.23, num04 = 4.56
선언하고자 하는 변수의 타입이 서로 같으면, 동시에 선언 가능