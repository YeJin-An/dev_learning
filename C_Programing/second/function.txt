함수(function)
-> 특별한 목적의 작업을 수행하기 위해
   독립적으로 설계된 프로그램 코드의 집합

C언어에서의 함수
1. 표준함수
2. 사용자 정의 함수


함수를 사용하는 이유
1. 반복적인 프로그래밍을 피할 수 있음.
2. 작성한 함수를 호출만 하면 됨.
3. 모듈화로 인해 전체적인 코드의 가독성이 좋아짐.
4. 기능변경이 필요할시 손쉽게 유지보수할 수 있음.
// 하나의 기능을 하나의 함수로 만드는 것이 좋음.

함수의 정의
1. 반환타입(return type)
-> 작업을 마치고 반환하는 데이터의 타입변환
2. 함수이름
-> 함수를 호출하기 위한 이름을 명시
3. 매개변수 목록(parameters)
-> 전달되는 인수의 값을 
   저장할 변수들을 명시해주는 역할
4. 함수 몸체
-> 함수의 고유 가능을 수행하는 명령문의 집합

# include <stdio.h>
int bigNum(int num01, int num02){
  if(num01 >= num02){return num01;}
  else(){return num02;}}

int main(void){int result; result=bigNum(3,5);}


함수의 원형 선언__ int bigNum(int, int);
-> C언어에 함수를 정의시 그 위치가 매우 중요하다
// C언어에서 main()함수가 컴파일러에 의해 컴파일된다.
-> 오류가 나오기 때문에 함수의 원형(prototype)선언을 하좡!

# 한번에 컴파일 하는 방식을 단일 패스(one pass)
  단일 패스(one pass)컴파일 방식이라고 한다.
# 하드웨어 발달로 여러번에 걸쳐 컴파일 하는 
  다중 패스(multi-pass)방식이 많아지고 있음

단일 패스 컴파일 방식은 함수의 원형 선언을 해야 오류안남
다중 패스 컴파일 방식은 함수의 원형 선언을 하지 않아도 됨.

