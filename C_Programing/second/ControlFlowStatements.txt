C프로그램
-> 절차적 프로그램(procedural program)
-> 명령형 프로그램(imperative program)

C프로그램은 
이 명령문은 처음부터 끝까지 순서대로 실행된다.
// 원하는 결과를 얻기 위해 
   프로그램의 순차적인 흐름을 제어해야만 한다.



제어문(control flow statements)
: 프로그램의 순차적인 흐름을 제어하는 명령문이다.

제어문의 종류
1. 조건문(conditional statements)
: 조건식의 결과에 따라 명령을 수행하는 제어 명령문
-> if 문
-> if / else 문
-> if / else if / else 문
-> 조건식 ? 반환값1: 반환값2 __ 삼항연산자

-> switch 문
: 주어진 조건 값의 결과에 따라 
  프로그램이 다른 명령을 수행하도록 하는 조건문
: 가독서이 조아 컴파일러가 최적화를 쉽게 할 수 있고, 빠르다.
: char, short, int, 리터럴, 열거체 까지 사용가능..
  --> 구조체에서 나온다.
: default절은 case절에도 해당하지 않을 때, 실행되는 것
              이 절은 필요할 때만 선언할 수 있음.
: 단 brank은 반드시 case절안에 작성해주도록 하자!!
  그렇지 않으면 case절과 default절이 전부 실행이 된다.

char ch = 'a';
switch(ch)
{
  case 'a':
  case 'A':
    printf("이 학생의 학점은 A입니다.")
  break;
}

2. 반복문
: 일정 횟수만큼 반복하여 수행하도록 제어하는 명령문
: 루프(loop) -> 표현식의 검사를 통해 반복해서 실행

반복문의 종류
1. while 문
  while(조건식){명령문}
// 주의점 -> 무한 루프(infinite loop)
   거짓(false)을 갖도록 
   조건식의 결과를 변경하는 명령문을 작성하자

2. do / while 문
-> 루프에 집입하기 저 조건식부터 검사하기
  do{명령문}while(조건식);
  do{
    printf("do/while문이 %d번째 반복 수행중",i+1);
    i++;
  } while(i>num);
-> 조건식의 결과와 상관없이 무조건 한 번은 루프를 실행한다.

3. for 문
  for(초기식; 조건식; 증감식){명령문}
  : whild문을 더욱 간격하게 포현할 수 있습니다.

// 정리
// while(조건식){명령문};
   do{명령문}whild(조건식);
   for(초기식; 조건식; 증감식){명령문};

  4. 기타 제어문
  -> 루프의 제어
    : 다음 조건식을 검사하기 전 루프안에 있는 명령문 실행
  -> continue 문
    : 특정 조건에 대한 예외 처리를 할 때 사용
    : 해당 루프의 나머지 부분을 건너뛰고, 
      다음 조건식의 판단으로 넘어간다.
  -> break 문
    : 판단 결과에 상관없이 반복문을 빠져나갈때, 사용
  -> goto 문
    : 프로그램의 흐름을 지정된 레이블(label)
      로 무조건 변경시키는 명령문
    : 아무런 조건 없이 프로그램의 흐름을 옮겨준다.
      그렇기에 프로그램의 흐름을 매우 복잡하게 만들기도 하다.ㅓ
    : 현재는 디버깅 이외에는 거의 사용되지 않는다.

기타. ({})는 블록(block)이라고 한다.
기타. 인덴트(indent) -> 코드의 가독성을 높이는 것
