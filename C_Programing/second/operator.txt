연산자(operator)
: 프로그램의 산술식이나 연산식을 표현하고,
  처리하기 위해 제공되는 다양한 기호를 의미

C언어
: 여러 종류의 연산을 위해 다양하게 재공한다.

항이란?
-> 연산의 실행이 가능하기 위해 필요한 값이나 변수
-> 이항 연산자는 연산실행을 위한 [2의 값,변수]

연산자의 우선순위(operator precedence)
-> 연산자의 처리 순서를 변경하는 것

결합 방향(associativity)
-> 수식 내에 우선순위가 같은 연산자가 2개 이상있을 때,
-> [결합 순서]에 따라 [실행 순서]가 결정된다.


연산자(operator)의 종류
1. 산술 연산자(arithmetic operator)
-> 사칙연산 [ + , - , * , / , % ]
-> 두 개의 피연산자를 가지는 이항 연산자

2. 대입 연산자(assignment operator)
-> 변수에 값을 대입할 때, 사용하는 이항 연산자
-> 피연산자들의 결함 방향은 오른쪽에서 왼쪽
-> 다양한 복합 대입 연산자가 존재한다.
 // 연산자의 순서는 매우 중요하므로 주의를 기울여야 함.
  ex> -= or =-

3. 증감 연산자(increment and decrement operator)
-> 피연산자를 +1 or -1때, 사용하는 연산자
-> 피연산자가 단 하나뿐인 단항 연산자이다.
-> 연산순서 감소연산자 + 덧셈연산자 + 그리고 합침.

4. 비교 연산자(comparison operator)
-> 피연산자 사이의 상대벅인 크기를 판단하는 연산자
-> 피연산자를 가지는 이항 연산자
-> 피연산자들의 결합 방향은 왼쪽에서 오른쪽이다.

5. 논리 연산자(logical operator)
-> 주어진 논리식을 판단하여 참과 거짓을 결정하는 연산자가
-> And와 OR은 두개의 피연산자를 가지는 이항 연산자
-> NOT 피연산자들의 결합 방향은 왼쪽에서 오른쪽이다.
-> true = 1 , false = 0 , && = and , || = or , ! = not 

6. 비트 연산자(bitwise operator)
-> bit단위로 논리 연산을 할 때, 사용하는 연산자
-> 비트 단위를 왼쪽에서 오른쪽으로 이동시킬 때 사용하기도 함.
-> & = and , | = or , ^ = xor ,
   ! = not , << = 왼쪽이동 , >> = 오른쪽이동

7. 기타 연산자
  - 삼항 연산자(ternary operator)
  -> C언어만에 있는 연산자
     조건식 ? 반환값1 : 반환값2

  - 쉼표 연산자
  -> 두 연산식을 하나의 연산식으로 나타낼 떄,
  -> 둘 이상의 인수를 함수로 전달할 때,
  printf("첫 번째 수는 %d이고, 두 번째 수는 %d 입니다"
         ,varable, varable)

  - sizeof 연산자
  -> 단항 연산자로 피연산자의 크기를 바이트 단위로 반환
  -> 변수나 상수를 전달받을 수도 있음.
  -> 변수나 상수가 피연산자로 전달되면,
     해당 변수나 상수에 해당하는 타입의 크기를 반환
  size = sizeof num1;
  printg("num의 크기: %d\n", size) // num1의 크기: 4

  - 포인터 연산자
  -> 주소 연산자(&) 
  : 해당 변수의 주소값을 반환한다
  : 앰퍼샌드(ampersand), 번지 연산자
  -> 참조 연산자(*)
  : 포인터에 가리키는 주소에 저장된 값을 반환값1
  : C언어 같은 경우
    1. 이항 연산자는 곱셈 연산
    2. 포인터의 선언시나 
    3. 메모리에 접근할 때, 사용가능

