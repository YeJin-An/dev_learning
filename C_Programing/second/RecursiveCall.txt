재귀호출(recursive call)
-> 함수가 자시 자신을 호출하는 행우
-> 생각의 늪에 빠져 끝없이 반복한다.
-> 생각의 늪을 빠져나가기위해 명령문을 포함하자!

// 주의점
: 알고리즘이나 자료 구조론에서는 
  매우매우 중요한 개념 중 하나입니다.
왜냐하면 
  복잡한 문제도 매우 간단하게 논리적으로 
  접근하여 표현이 가능하기 때문입니다.


  재귀 호출의 개념

  int sum(int n){
    int i;
    int result = 0;

    for(i=1; i<=n, i++){
      result += i;
    }
   return result;
  }

논리적흐름
1. 1부터 4까지의 합은 1부터 3까지의 합에 4를 더하면 됩니다.
2. 1부터 3까지의 합은 1부터 2까지의 합에 3을 더하면 됩니다.
3. 1부터 2까지의 합은 1부터 1까지의 합에 2를 더하면 됩니다.
4. 1부터 1까지의 합은 그냥 1입니다.

// 의사코드(pseudo code)
-> 일반적인 언어로 알고리즘을 표현한 코드
-> 특정 프로그래밍 언어의 문법에 맞춰 작성된 것이 아님.

int rSum(int n){
  if(n==1){return 1;}
  return n + rSum(n-1);
}

// if문이 없으면, 스택 오버 플로우(stack overflow) 발생
   재귀 호출을 중단하기 위해 조건문을 반드시 포함하장!!

// 정리
-> 알고리즘을 표현한 의사코드를 그대로 코드로 옮길 수 있는거
-> 직관적인 프로그래밍을 하는데, 많은 도움을 줌
-> 비재귀 호출보다 실행시간이 오려걸리는 단점이 있음.

: 코드의 간결함
: 무한 재귀호출의 위험성, 성능 상의 문제

